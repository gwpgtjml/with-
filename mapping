// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract EnhancedStorageETHAndToken is ERC20, Ownable {
    uint256 public creationTimestamp;
    bool public isLocked;

    mapping(address => uint256) public ethBalances;
    mapping(address => mapping(address => uint256)) public tokenBalances;

    event EthDeposited(address indexed depositor, uint256 amount);
    event TokenDeposited(address indexed depositor, address indexed token, uint256 amount);
    event EthWithdrawn(address indexed withdrawer, uint256 amount);
    event TokenWithdrawn(address indexed withdrawer, address indexed token, uint256 amount);

    modifier notLocked() {
        require(!isLocked, "Contract is locked and data cannot be modified");
        _;
    }

    constructor(string memory tokenName, string memory tokenSymbol) ERC20(tokenName, tokenSymbol) {
        creationTimestamp = block.timestamp;
        isLocked = false;
    }

    function depositEth() external payable notLocked {
        ethBalances[msg.sender] += msg.value;
        emit EthDeposited(msg.sender, msg.value);
    }

    function withdrawEth(uint256 amount) external notLocked {
        require(amount <= ethBalances[msg.sender], "Insufficient ETH balance");
        ethBalances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
        emit EthWithdrawn(msg.sender, amount);
    }

    function depositToken(address token, uint256 amount) external notLocked {
        require(amount > 0, "Deposit amount must be greater than 0");
        require(
            IERC20(token).transferFrom(msg.sender, address(this), amount),
            "Token transfer failed"
        );
        tokenBalances[msg.sender][token] += amount;
        emit TokenDeposited(msg.sender, token, amount);
    }

    function withdrawToken(address token, uint256 amount) external notLocked {
        require(amount > 0, "Withdrawal amount must be greater than 0");
        require(
            amount <= tokenBalances[msg.sender][token],
            "Insufficient token balance"
        );
        tokenBalances[msg.sender][token] -= amount;
        require(IERC20(token).transfer(msg.sender, amount), "Token transfer failed");
        emit TokenWithdrawn(msg.sender, token, amount);
    }

    function lockContract() external onlyOwner {
        isLocked = true;
    }

    function unlockContract() external onlyOwner {
        isLocked = false;
    }
}
